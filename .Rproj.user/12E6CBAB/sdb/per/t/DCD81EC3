{
    "collab_server" : "",
    "contents" : "# Generating a csv of random infection cases in a period of two months\n# For uploading to DHIS2 Event Tracker according to specified format\n# https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html#webapi_events_csv_import_export\n\n\n# Dependencies\nlibrary(truncnorm)\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(XML)\n\n\nn <- 200\n\n# constant dimensions\nconst <- list(status            = 'ACTIVE',\n              program           = 'iMQ9InaUU5m', #Kenema 2014 Outbreak\n              enrollment        = '',\n              programStage      = 'Wn7LAv17lfS',\n              orgUnit           = 'kJq2mPyFEHo', #kenema\n              AmO6YwrO46f       = \"jUb8gELQApl\", #district = Kailahun\n              dueDate           = '2017-07-12T19:11:19.801',\n              latitude          = 0,\n              longitude         = 0,\n              storedBy          = 'admin',\n              providedElsewhere = '')\n\n\n#TODO -> replace static UIDs with dynamic call to /api/system/id.json?limit=n\nuid <- c(\"tHF7qDZVeoT\", \"e4b8nZEVFIS\", \"r214KeAilsh\", \"PUPI2ZGMKCU\", \"JcmJa3BPJPB\", \"WO08wxnFxlo\", \"jBJ4dVT4Vpn\", \"KpV4jXnOi3X\", \"wYpVB2qvtif\", \"qyEGtKuURxp\", \"v8zo0HACxdc\", \"HObXfaI9bKP\",\n         \"a4Tjvw2D2IO\", \"wNN6FioIyLH\", \"PA2dv8AuQjY\", \"JLaBV19XZWH\", \"sTooUkg05gm\", \"M8pidK3JvLI\", \"l79SXeCwvOk\", \"yBEM2gX2d6H\", \"YkWQwYfZqPO\", \"whsXsdFTdya\", \"RO8oANHxSQA\", \"jqD6guWMVfo\",\n         \"bEj4uYXrG47\", \"QzFYf8s6zNm\", \"ex6Rb2TWv9O\", \"XzKfqF0IcAg\", \"AVJGQwXDw6a\", \"aW37Qdu3Dcs\", \"o0RetQF035r\", \"sTD4iAjuqJg\", \"KSSciLFlDcL\", \"TgMpvv9emZN\", \"dvYlBJqyqpo\", \"gmGalusQaUK\",\n         \"bBFauEOEl2n\", \"zSNTCN2R0eV\", \"QmpRDqpm6Ov\", \"FaI8mCzx3Re\", \"fw0JyU1acej\", \"Ig88doreF9i\", \"W0TQGR3bB9S\", \"oXtUYcoq4ZX\", \"cU7Z1pw1tsL\", \"HRafkzdnTP2\", \"SkryQFhlCYk\", \"SPN0cId0ntZ\",\n         \"VU8C0b9HXeC\", \"PMKYIPQJFU6\", \"fVAek9wGXy6\", \"ZSGSw2Ho8uq\", \"E6nCasUgYe6\", \"YDZntnX9SK0\", \"eoT0kfAxjGQ\", \"R7sRihn6FU7\", \"smzNYC57J8X\", \"s6VAX2JWQR3\", \"XfxprZ5fG49\", \"lOtstMFTs16\",\n         \"OSy9yXMenU1\", \"tt0YkEZHAep\", \"GxWR2SkIyNc\", \"X2Vw0dmOYXD\", \"j14AeWKkZYx\", \"OqJlIAyj640\", \"Vc3GIDOFycj\", \"QB0QRxyObxT\", \"ucD5UsmHSHu\", \"TkkwIsv1fmb\", \"tX03umHsNnG\", \"F7xqGXrFjZe\",\n         \"FX1BiOKu5w4\", \"RSa0eMV8AQc\", \"zMSNbbztgM9\", \"Ue8jabUvOSK\", \"ie9kvjvFzuN\", \"FAQ2kXKuOzx\", \"f5c8ooiLl6H\", \"jM2HAVdLvGs\", \"jsV3ruvcSpr\", \"Nhy4CJkj0WE\", \"KLivieskyYG\", \"ZVK49FaApKc\",\n         \"B0pOBq7XXhW\", \"UYYT1uOTxr9\", \"gaJc0A8GsaG\", \"YK4CkcEQvlK\", \"oSCIbQnW9A1\", \"VuJTkKL5BOR\", \"BebOk8Vg2Oi\", \"XgnQGl9uPVv\", \"GtKoyyzN03g\", \"gy1CnRm3fNl\", \"h6rCZ6hkUSR\", \"GPeuZsIzxAk\",\n         \"UI23HXLcEG9\", \"cRGvGeEvet5\", \"tZArO0TrNKm\", \"crtr9iEP4CG\", \"ehvpcfGI5Ye\", \"jP2gjFzAIOA\", \"joi8IDTF49f\", \"Blo65YK3wdS\", \"Ne99YFdKTTs\", \"QAlGIIcU0xx\", \"yDFjGGotFLs\", \"OTY2FB4BFeB\",\n         \"doBnC39WTLj\", \"vlEen05Lc1H\", \"r6SvYYOajCo\", \"VZ9d26E5z4V\", \"JWbr8HHkdOu\", \"Zkrz3tBtOey\", \"qRnud97OSw1\", \"WCfmMIKhcso\", \"N7N4OzNfZfy\", \"PJ6SB7med9m\", \"t7irV8PsQFC\", \"iiJNoK82b5e\",\n         \"H7RSzseBELg\", \"iMxtJ2sQ4ye\", \"zFSUrsLeSDj\", \"JCWg6PC9DBD\", \"jeZVl7cvjOA\", \"gnnlGOz2fgT\", \"oMD38fC02YE\", \"N96XBdtfGmw\", \"izQdTV9KXuk\", \"OeVEixMNdji\", \"m6mOSp6HHGZ\", \"PESGlCWtYOV\",\n         \"wLsIVHwBKJy\", \"N7rUzttkdb0\", \"Trk9N3OG7Bp\", \"WbKcZKRg9Wt\", \"DW69VT8ZNst\", \"IqybskXtbaV\", \"gEIr49eF5no\", \"fH2P38OCp88\", \"nh1P32Bg2ll\", \"HNHVzyu8u1X\", \"YXs8F1TE5o9\", \"cWdDokNlhD5\",\n         \"Nlh8RcsPKCF\", \"jCLIrQwptr6\", \"BYS04pjQhPw\", \"CK4IW4qKHEB\", \"yLry0B6JOWr\", \"mnt0y891d5O\", \"iW7xvTrmzFm\", \"iBMRuuB1BIR\", \"OQ9ppbm2Crb\", \"nE7B4iW7q1H\", \"tDT7MMMImKu\", \"Wc8KrGtietl\",\n         \"sHRIcHZy15k\", \"bLtlwGf4Y3I\", \"OfV4vDQZiMn\", \"tS6SFiOW9R0\", \"QH9tDcalQee\", \"SRBNgplb1um\", \"FPmHSWFesZ6\", \"ZMma2r4828Q\", \"fRfE3g8cwPW\", \"IbRtZdHYL4e\", \"hkcXAHa6Yl6\", \"DKqaBVDb93d\",\n         \"XAb5RAw7OB9\", \"s1RLmGvPKBi\", \"L8SSz4JWRLt\", \"Gb1zc8bNj6i\", \"oD9EUSzYWUj\", \"KEh4btqYT3H\", \"x4ORtMCNBtF\", \"fFWe6MRtS67\", \"oAO3nxzMFq3\", \"TssMGFPGKQF\", \"HydV84q4HHf\", \"u8Q6HRY8RUY\",\n         \"OD8f5JcDxks\", \"vQ6DoDziQCO\", \"SStA7SLRNUG\", \"Q4uiIHk2wo1\", \"IbNmcNLJ3Ml\", \"IuaRcYrbzJY\", \"r9EwrGmlpZ3\", \"kfBGWlfRXy5\", \"CmeKALHgudv\", \"g4QwPi0Ttga\", \"uYsCgTncRoc\", \"VAoGVfKvfd2\",\n         \"Y8EbvQrEeCi\", \"WfKBmKzkx1n\", \"E5NX0YMakGy\", \"yBNg23LOP2C\", \"BPvX62h3Gif\", \"pec8WuT7R8L\", \"QK1cwoqBeLG\", \"TqRuyFWDIwn\")\n\n\n# EBOV PCR load values\npcr <- round(rtruncnorm(n=n, a=1, b=8.3, mean=3.5, sd=3.82), digits = 8)\npcr.t <- data.frame(event = uid, QloZSfFjMlw = pcr)\n\n# GID numbers == pzsJKs59JsY\nsequence <- seq(0000, 1000, by = 1)\nlead.sequence <- formatC(sequence, width = 4, format = \"d\", flag = \"0\")\nlead.sequence.c <- sprintf(\"T-%s\", lead.sequence)\ngid <- sample(lead.sequence.c, n, F)\ngid.t <- data.frame(event = uid, pzsJKs59JsY = gid)\n\n\n# assign GenBank IDs\nseqID <- c('KR105295.1', 'KR105294.1', 'KR105266.1', 'KR105263.1', 'KR105318.1', 'KR105317.1', 'KR105316.1', 'KR105312.1',\n           'KR105311.1', 'KR105310.1', 'KR105308.1', 'KR105306.1', ' KR105300.1', 'KR105293.1', 'KR105285.1', 'KR105284.1')\nsequence <- sample(seqID, n, T)\nsequence.t <- data.frame(event = uid, Wr0eNRscuNo = sequence)\n\n# assign gender\ngender <- sample(c(\"Female\", \"Male\"), n, T)\ngender.t <- data.frame(event = uid, oZg33kd9taw = gender)\n\n# assign age\nage <- floor(rtruncnorm(n=n, a=16, b=70, mean=33, sd=20))\nage.t <- data.frame(event = uid, qrur9Dvnyt5 = age)\n\n# assign outcome\noutcome <- sample(c(\"Died\", \"Discharged\"), n, T)\noutcome.t <- data.frame(event = uid, wriXJkDtFE7 = outcome)\n\n# chiefdom == NczRMzhFDdO\nchief.options <- c(\"j0Mtr3xTMjM\", \"hjpHnHZIniP\", \"j0Mtr3xTMjM\", \"byp7w6Xd9Df\", \"JsxnA2IywRo\")\nchiefdom <- sample(chief.options, n, T)\nchiefdom.t <- data.frame(event = uid, NczRMzhFDdO = chiefdom)\n\n\n# Generating the two days datasets\nset.seed(43)\ndays1 <- round(rnorm(100, mean = 25, sd = 2))\ndays2 <- round(rnorm(100, mean = 0, sd = 4))\n\n# Turning negative days into days of previous month\ntoPrevMonth <- function(vect) {\n  toMay <- c()\n  toJune <- c()\n  for (i in 1:length(vect)) {\n    if (vect[i] <= 0) {\n      toMay <- append(toMay, vect[i] + 31)\n    } else {\n      toJune <- append(toJune, vect[i])\n    }\n  }\n  return(list(\"toMay\" = toMay, \"toJune\" = toJune))\n}\n\nlistOfVectors <- toPrevMonth(days2)\n\n\n# Clean days variable asignment\nD1a <- days1\nD1b <- listOfVectors$toMay\nD2 <- listOfVectors$toJune\n\n\n# Create dates for May and June\ndates1a <- sprintf(\"2014-05-%dT00:00:00.000\", D1a)\ndates1b <- sprintf(\"2014-05-%dT00:00:00.000\", D1b)\ndates2 <- sprintf(\"2014-06-%dT00:00:00.000\", D2)\n\n# create random locations\n#for town 1\nlat1 <- seq(8.81, 9.34, by = 0.03)\nlng1 <- seq(-12.48, -11.8, by = 0.03)\n\n# for town 2\nlat2 <- seq(7.6, 8.2, by = 0.03)\nlng2 <- seq(-11.5, -10.6, by = 0.03)\n\n\n# sampling to create coordinates\nc1 <- list('lat' = sample(lat1, length(dates1a), T),\n           'lng' = sample(lng1, length(dates1a), T))\n\n\nc2a <- list('lat' = sample(lat2, length(dates1b), T),\n            'lng' = sample(lng2, length(dates1b), T))\n\nc2b <- list('lat' = sample(lat2, length(dates2), T),\n            'lng' = sample(lng2, length(dates2), T))\n\n\n# dataframes\ntown1 <- data.frame(eventDate = dates1a, lat = c1$lat, lng = c1$lng)\ntown2a <- data.frame(eventDate = dates1b, lat = c2a$lat, lng = c2a$lng)\ntown2b <- data.frame(eventDate = dates2, lat = c2b$lat, lng = c2b$lng)\nallcases <- rbind(town1, town2a, town2b)\nallcases <- cbind(event = uid, allcases, sequence, gender, age, outcome, chiefdom, gid)\n\nallcases$location <- paste(\"[\", allcases$lng, \",\", allcases$lat, \"]\", sep = \"\")\nallcases$load <- pcr\n\nallcases$eventDate <- as.character(allcases$eventDate)\nallcases$gender <- as.character(allcases$gender)\nallcases$age <- as.character(allcases$age)\nallcases$outcome <- as.character(allcases$outcome)\nallcases$sequence <- as.character(allcases$sequence)\nallcases$chiefdom <- as.character(allcases$chiefdom)\nallcases$gid <- as.character(allcases$gid)\n\nsub <- allcases[c(1:5),]\n\nlocation.t <- data.frame(event = uid, F3ogKBuviRA = paste(allcases$lng, ',', allcases$lat, sep = ''))\n\n# meltCol <- function(vector){\n#   return(melt(vector, id.vars = 'event'))\n# }\n# \n# pcr.m <- meltCol(pcr.t)\n# gid.m <- meltCol(gid.t)\n# sequence.m <- meltCol(sequence.t)\n# gender.m <- meltCol(gender.t)\n# age.m <- meltCol(age.t)\n# outcome.m <- meltCol(outcome.t)\n# chiefdom.m <- meltCol(chiefdom.t)\n# location.m <- meltCol(location.t)\n# district.m <- meltCol(data.frame(event = uid, AmO6YwrO46f = const$AmO6YwrO46f))\n# \n# dates <- data.frame(event = uid, eventDate = allcases$eventDate)\n# \n# \n# rowVars <- rbind(location.m, gender.m, age.m, outcome.m, pcr.m, sequence.m, chiefdom.m, district.m, gid.m)\n# rowVars.o <- arrange(rowVars, event)\n# \n# varsTable <- dates %>% left_join(rowVars.o, by = \"event\")\n# \n# finalTable <- data.frame(event = varsTable$event,\n#                          status = const$status,\n#                          program = const$program,\n#                          programStage = const$programStage,\n#                          enrollment = const$enrollment,\n#                          orgUnit = const$orgUnit,\n#                          eventDate = as.character(varsTable$eventDate),\n#                          dueDate = const$dueDate,\n#                          latitude = const$latitude,\n#                          longitude = const$longitude,\n#                          dataElement = varsTable$variable,\n#                          value = varsTable$value,\n#                          storedBy = const$storedBy,\n#                          providedElsewhere = const$providedElsewhere\n# )\n\n# write.csv(finalTable, file = \"programKenemaDhis.csv\", row.names = F, quote = F, fileEncoding = 'UTF-8')\n\n# write.csv(finalTable[1:5,], file = \"programKenemaTest.csv\", row.names = F, quote = F, fileEncoding = 'UTF-8')\n\n\nxml <- xmlTree()\n  xml$addTag(\"events\", close=F)\n    for (i in 1:nrow(allcases)) {\n      xml$addTag(\"event\", close=F, attrs = c(program = const$program, orgUnit = const$orgUnit, eventDate = allcases$eventDate[i], status = const$status, storedBy = const$storedBy))\n      xml$addTag(\"coordinate\", close=T, attrs = c(latitude = const$latitude, longitude = const$longitude))\n      xml$addTag(\"dataValues\", close=F)\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"F3ogKBuviRA\", value = allcases$location[i])) #location\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"oZg33kd9taw\", value = allcases$gender[i])) #gender\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"qrur9Dvnyt5\", value = allcases$age[i])) #age\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"wriXJkDtFE7\", value = allcases$outcome[i])) #outcome\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"QloZSfFjMlw\", value = allcases$load[i])) #pcr load\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"Wr0eNRscuNo\", value = allcases$sequence[i])) #genebank\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"NczRMzhFDdO\", value = allcases$chiefdom[i])) #chiefdom\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"AmO6YwrO46f\", value = const$AmO6YwrO46f))    #district\n      xml$addTag(\"dataValue\", close=T, attrs = c(dataElement = \"pzsJKs59JsY\", value = allcases$gid[i]))    #gid\n      xml$closeTag()\n      xml$closeTag()\n    }\n\ncat(saveXML(xml))\n\n\nsaveXML(xml, file = \"Kenema2014FinalDummy.xml\", indent=TRUE)\n",
    "created" : 1501785178110.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1499273000",
    "id" : "DCD81EC3",
    "lastKnownWriteTime" : 1502387626,
    "last_content_update" : 1502387626586,
    "path" : "~/projects/Kenema Event Data Generator/eventData_generator.R",
    "project_path" : "eventData_generator.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}